{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/db.ts"],"sourcesContent":["import knex from 'knex';\nimport path from 'path';\n\n// Determine the database path\nconst dbPath = process.env.NODE_ENV === 'development'\n  ? path.resolve(process.cwd(), 'dev.db')\n  : '/data/prod.db'; // Use a persistent volume in production\n\nconst db = knex({\n  client: 'better-sqlite3',\n  connection: {\n    filename: dbPath,\n  },\n  useNullAsDefault: true,\n});\n\n// Function to initialize the database schema\nasync function initializeDatabase() {\n  const hasUsers = await db.schema.hasTable('User');\n  if (!hasUsers) {\n    await db.schema.createTable('User', (table) => {\n      table.increments('id').primary();\n      table.string('name').notNullable();\n      table.string('email').unique().notNullable();\n      table.string('password').notNullable();\n      table.string('role').defaultTo('user');\n      table.string('image');\n      table.timestamps(true, true);\n    });\n  }\n\n  const hasCategories = await db.schema.hasTable('Category');\n  if (!hasCategories) {\n    await db.schema.createTable('Category', (table) => {\n      table.increments('id').primary();\n      table.string('name').unique().notNullable();\n      table.string('slug').unique().notNullable();\n    });\n  }\n  \n  const hasPosts = await db.schema.hasTable('Post');\n  if (!hasPosts) {\n    await db.schema.createTable('Post', (table) => {\n      table.increments('id').primary();\n      table.string('title').notNullable();\n      table.string('slug').unique().notNullable();\n      table.text('content');\n      table.string('excerpt');\n      table.string('image');\n      table.string('imageHint');\n      table.integer('categoryId').unsigned().references('id').inTable('Category').onDelete('SET NULL');\n      table.string('tags');\n      table.string('status').defaultTo('Draft');\n      table.integer('authorId').unsigned().references('id').inTable('User').onDelete('CASCADE');\n      table.timestamps(true, true);\n    });\n  }\n\n  // Seed initial data if tables are empty\n  const userCount = await db('User').count('id as count').first();\n  if (userCount && userCount.count === 0) {\n    const hashedPassword = await require('bcryptjs').hash('admin123', 10);\n    await db('User').insert({\n      name: 'Admin User',\n      email: 'admin@travonex.com',\n      password: hashedPassword,\n      role: 'admin'\n    });\n  }\n  \n  const categoryCount = await db('Category').count('id as count').first();\n    if (categoryCount && categoryCount.count === 0) {\n        await db('Category').insert([\n            { name: 'Weekend Getaways', slug: 'weekend-getaways' },\n            { name: 'Adventure Travel', slug: 'adventure-travel' }\n        ]);\n    }\n\n}\n\n// Initialize and export the database\ninitializeDatabase().catch(console.error);\n\nexport { db };\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,8BAA8B;AAC9B,MAAM,SAAS,uCACX,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,kDACX,wCAAwC;AAE7D,MAAM,KAAK,CAAA,GAAA,8HAAA,CAAA,UAAI,AAAD,EAAE;IACd,QAAQ;IACR,YAAY;QACV,UAAU;IACZ;IACA,kBAAkB;AACpB;AAEA,6CAA6C;AAC7C,eAAe;IACb,MAAM,WAAW,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC;IAC1C,IAAI,CAAC,UAAU;QACb,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC;YACnC,MAAM,UAAU,CAAC,MAAM,OAAO;YAC9B,MAAM,MAAM,CAAC,QAAQ,WAAW;YAChC,MAAM,MAAM,CAAC,SAAS,MAAM,GAAG,WAAW;YAC1C,MAAM,MAAM,CAAC,YAAY,WAAW;YACpC,MAAM,MAAM,CAAC,QAAQ,SAAS,CAAC;YAC/B,MAAM,MAAM,CAAC;YACb,MAAM,UAAU,CAAC,MAAM;QACzB;IACF;IAEA,MAAM,gBAAgB,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC;IAC/C,IAAI,CAAC,eAAe;QAClB,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC;YACvC,MAAM,UAAU,CAAC,MAAM,OAAO;YAC9B,MAAM,MAAM,CAAC,QAAQ,MAAM,GAAG,WAAW;YACzC,MAAM,MAAM,CAAC,QAAQ,MAAM,GAAG,WAAW;QAC3C;IACF;IAEA,MAAM,WAAW,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC;IAC1C,IAAI,CAAC,UAAU;QACb,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC;YACnC,MAAM,UAAU,CAAC,MAAM,OAAO;YAC9B,MAAM,MAAM,CAAC,SAAS,WAAW;YACjC,MAAM,MAAM,CAAC,QAAQ,MAAM,GAAG,WAAW;YACzC,MAAM,IAAI,CAAC;YACX,MAAM,MAAM,CAAC;YACb,MAAM,MAAM,CAAC;YACb,MAAM,MAAM,CAAC;YACb,MAAM,OAAO,CAAC,cAAc,QAAQ,GAAG,UAAU,CAAC,MAAM,OAAO,CAAC,YAAY,QAAQ,CAAC;YACrF,MAAM,MAAM,CAAC;YACb,MAAM,MAAM,CAAC,UAAU,SAAS,CAAC;YACjC,MAAM,OAAO,CAAC,YAAY,QAAQ,GAAG,UAAU,CAAC,MAAM,OAAO,CAAC,QAAQ,QAAQ,CAAC;YAC/E,MAAM,UAAU,CAAC,MAAM;QACzB;IACF;IAEA,wCAAwC;IACxC,MAAM,YAAY,MAAM,GAAG,QAAQ,KAAK,CAAC,eAAe,KAAK;IAC7D,IAAI,aAAa,UAAU,KAAK,KAAK,GAAG;QACtC,MAAM,iBAAiB,MAAM,6FAAoB,IAAI,CAAC,YAAY;QAClE,MAAM,GAAG,QAAQ,MAAM,CAAC;YACtB,MAAM;YACN,OAAO;YACP,UAAU;YACV,MAAM;QACR;IACF;IAEA,MAAM,gBAAgB,MAAM,GAAG,YAAY,KAAK,CAAC,eAAe,KAAK;IACnE,IAAI,iBAAiB,cAAc,KAAK,KAAK,GAAG;QAC5C,MAAM,GAAG,YAAY,MAAM,CAAC;YACxB;gBAAE,MAAM;gBAAoB,MAAM;YAAmB;YACrD;gBAAE,MAAM;gBAAoB,MAAM;YAAmB;SACxD;IACL;AAEJ;AAEA,qCAAqC;AACrC,qBAAqB,KAAK,CAAC,QAAQ,KAAK","debugId":null}},
    {"offset": {"line": 317, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/auth.ts"],"sourcesContent":["import { AuthOptions } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport bcrypt from \"bcryptjs\";\nimport { db } from \"@/lib/db\";\n\nexport const authOptions: AuthOptions = {\n  session: {\n    strategy: \"jwt\",\n  },\n  pages: {\n    signIn: \"/login\",\n  },\n  providers: [\n    CredentialsProvider({\n      name: \"Credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          return null;\n        }\n\n        const user = await db('User').where({ email: credentials.email }).first();\n\n        if (!user) {\n          return null;\n        }\n\n        const isPasswordValid = await bcrypt.compare(\n          credentials.password,\n          user.password\n        );\n\n        if (!isPasswordValid) {\n          return null;\n        }\n\n        return {\n          id: user.id.toString(),\n          email: user.email,\n          name: user.name,\n          role: user.role,\n          image: user.image,\n        };\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n        token.role = (user as any).role;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (session.user) {\n        session.user.id = token.id as string;\n        session.user.role = token.role as string;\n      }\n      return session;\n    },\n  },\n  secret: process.env.NEXTAUTH_SECRET || 'fallback-secret-for-development',\n};\n"],"names":[],"mappings":";;;AACA;AACA;AACA;;;;AAEO,MAAM,cAA2B;IACtC,SAAS;QACP,UAAU;IACZ;IACA,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,OAAO;gBACT;gBAEA,MAAM,OAAO,MAAM,CAAA,GAAA,kHAAA,CAAA,KAAE,AAAD,EAAE,QAAQ,KAAK,CAAC;oBAAE,OAAO,YAAY,KAAK;gBAAC,GAAG,KAAK;gBAEvE,IAAI,CAAC,MAAM;oBACT,OAAO;gBACT;gBAEA,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAC1C,YAAY,QAAQ,EACpB,KAAK,QAAQ;gBAGf,IAAI,CAAC,iBAAiB;oBACpB,OAAO;gBACT;gBAEA,OAAO;oBACL,IAAI,KAAK,EAAE,CAAC,QAAQ;oBACpB,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;oBACf,MAAM,KAAK,IAAI;oBACf,OAAO,KAAK,KAAK;gBACnB;YACF;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,IAAI,GAAG,AAAC,KAAa,IAAI;YACjC;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,QAAQ,IAAI,EAAE;gBAChB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;YAChC;YACA,OAAO;QACT;IACF;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe,IAAI;AACzC","debugId":null}},
    {"offset": {"line": 394, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\"\nimport { authOptions } from \"@/lib/auth\"\n\nconst handler = NextAuth(authOptions)\n\nexport { handler as GET, handler as POST }\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE,oHAAA,CAAA,cAAW","debugId":null}}]
}